generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 利用者集約
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
model users {
    id          String  @id
    name        String
    updated_at  DateTime    @updatedAt
    created_at  DateTime    @default(now())
    //
    borrow_histories borrow_histories[]
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// 書籍集約
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
model books {
    id          String  @id
    name        String
    author      String
    updated_at  DateTime   @updatedAt
    created_at  DateTime   @default(now())
    //
    tags        tags[]
    lostings    lostings?
    privates    privates?
    borrow_histories borrow_histories[]
}

model lostings {
    book_id  String @id
    books   books @relation(fields: [book_id], references: [id])
}

model privates {
    book_id  String @id
    books   books @relation(fields: [book_id], references: [id])
}

// One-to-many relations
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations
model tags {
    tag_name    String
    book_id     String
    //
    books   books @relation(fields: [book_id], references: [id])
    @@id([tag_name, book_id])
}

model borrow_histories {
    book_id     String
    user_id     String
    start_at    DateTime @default(now())
    end_at      DateTime?
    //
    users   users @relation(fields: [user_id], references: [id])
    books   books @relation(fields: [book_id], references: [id])
    @@id([book_id,user_id,start_at])
}
